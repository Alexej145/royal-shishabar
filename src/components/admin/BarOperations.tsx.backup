import React, { useState, useEffect } from "react";
import {
  collection,
  query,
  where,
  onSnapshot,
  doc,
  updateDoc,
  orderBy,
} from "firebase/firestore";
import { getFirestoreDB } from "../../config/firebase";
import { Order, CartItem } from "../../types/order";
import { MenuItem } from "../../types/menu";
import LoadingSpinner from "../common/LoadingSpinner";
import { Clock, User, Hash, AlertTriangle, CheckCircle } from "lucide-react";
import toast from "react-hot-toast";

interface OrderWithItem extends Order {
  currentItem: CartItem & MenuItem;
}

interface BarOperationsProps {}

const BarOperations: React.FC<BarOperationsProps> = () => {
  const [drinkOrders, setDrinkOrders] = useState<OrderWithItem[]>([]);
  const [shishaOrders, setShishaOrders] = useState<OrderWithItem[]>([]);
  const [menuItems, setMenuItems] = useState<MenuItem[]>([]);
  const [loading, setLoading] = useState(true);
  const db = getFirestoreDB();

  useEffect(() => {
    // Load menu items first
    const menuQuery = query(collection(db, "menuItems"));
    const unsubscribeMenu = onSnapshot(menuQuery, (snapshot) => {
      const items = snapshot.docs.map(
        (doc) => ({ id: doc.id, ...doc.data() } as MenuItem)
      );
      setMenuItems(items);
    });

    return () => {
      unsubscribeMenu();
    };
  }, []);

  useEffect(() => {
    if (menuItems.length === 0) return;

    // Listen for pending orders
    const ordersQuery = query(
      collection(db, "orders"),
      where("status", "in", ["pending", "preparing"]),
      orderBy("createdAt", "asc")
    );

    const unsubscribeOrders = onSnapshot(
      ordersQuery,
      (snapshot) => {
        console.log(
          "🔄 BarOperations: Received orders snapshot, docs:",
          snapshot.docs.length
        );

        const orders = snapshot.docs.map(
          (doc) => ({ id: doc.id, ...doc.data() } as Order)
        );

        console.log("📊 BarOperations: Mapped orders:", orders.length);

        // Separate orders by category
        const drinks: OrderWithItem[] = [];
        const shisha: OrderWithItem[] = [];

        orders.forEach((order) => {
          order.items.forEach((orderItem) => {
            const menuItem = menuItems.find(
              (item) => item.id === orderItem.menuItemId
            );
            if (menuItem) {
              const orderWithMenuItem: OrderWithItem = {
                ...order,
                currentItem: {
                  ...orderItem,
                  ...menuItem,
                },
              };

              console.log(
                `🍽️ Processing item: ${menuItem.name} (${menuItem.category})`
              );

              if (
                menuItem.category === "drinks" ||
                menuItem.category === "beverages"
              ) {
                drinks.push(orderWithMenuItem);
              } else if (
                menuItem.category === "shisha" ||
                menuItem.category === "hookah"
              ) {
                shisha.push(orderWithMenuItem);
              }
            } else {
              console.warn("⚠️ Menu item not found for orderItem:", orderItem);
            }
          });
        });

        console.log("🍹 Drink orders:", drinks.length);
        console.log("💨 Shisha orders:", shisha.length);

        setDrinkOrders(drinks);
        setShishaOrders(shisha);
        setLoading(false);
      },
      (error) => {
        console.error("❌ BarOperations: Error listening to orders:", error);
        setLoading(false);
      }
    );

    return () => {
      unsubscribeOrders();
    };
  }, [menuItems]);

  const handleCompleteItem = async (orderId: string) => {
    try {
      console.log("🔄 Completing order:", orderId);
      const orderRef = doc(db, "orders", orderId);

      // For now, mark the entire order as completed
      // In a more sophisticated system, you'd track individual items
      await updateDoc(orderRef, {
        status: "ready",
        updatedAt: new Date(),
      });

      console.log("✅ Order completed successfully:", orderId);

      // Show success feedback to user
      toast.success("Bestellung erfolgreich als fertig markiert!");
    } catch (error) {
      console.error("❌ Fehler beim Abschließen der Bestellung:", error);
      toast.error(
        "Fehler beim Abschließen der Bestellung: " +
          (error instanceof Error ? error.message : String(error))
      );
    }
  };

  const getOrderPriority = (createdAt: any) => {
    const now = new Date();
    const orderTime = createdAt?.toDate
      ? createdAt.toDate()
      : new Date(createdAt);
    const minutesWaiting = Math.floor(
      (now.getTime() - orderTime.getTime()) / (1000 * 60)
    );

    if (minutesWaiting > 15) return "high";
    if (minutesWaiting > 10) return "medium";
    return "normal";
  };

  const getPriorityStyles = (priority: string) => {
    switch (priority) {
      case "high":
        return {
          border:
            "border-l-4 border-red-500 bg-gradient-to-r from-red-50 to-white shadow-red-100",
          badge: "bg-red-500 text-white",
          icon: "text-red-500",
        };
      case "medium":
        return {
          border:
            "border-l-4 border-yellow-500 bg-gradient-to-r from-yellow-50 to-white shadow-yellow-100",
          badge: "bg-yellow-500 text-white",
          icon: "text-yellow-500",
        };
      default:
        return {
          border:
            "border-l-4 border-green-500 bg-gradient-to-r from-green-50 to-white shadow-green-100",
          badge: "bg-green-500 text-white",
          icon: "text-green-500",
        };
    }
  };

  const formatWaitTime = (createdAt: any) => {
    const now = new Date();
    const orderTime = createdAt?.toDate
      ? createdAt.toDate()
      : new Date(createdAt);
    const minutesWaiting = Math.floor(
      (now.getTime() - orderTime.getTime()) / (1000 * 60)
    );
    return `${minutesWaiting}min`;
  };

  const getPriorityText = (priority: string) => {
    switch (priority) {
      case "high":
        return "DRINGEND";
      case "medium":
        return "MITTEL";
      default:
        return "NORMAL";
    }
  };

  const OrderCard = ({ order }: { order: OrderWithItem }) => {
    const priority = getOrderPriority(order.createdAt);
    const styles = getPriorityStyles(priority);

    return (
      <div
        className={`${styles.border} rounded-xl p-5 mb-4 shadow-lg hover:shadow-xl transition-all duration-300 transform hover:-translate-y-1`}
      >
        {/* Header */}
        <div className="flex justify-between items-start mb-4">
          <div className="flex items-center space-x-3">
            <div className="bg-white rounded-full p-2 shadow-sm">
              <Hash className="w-5 h-5 text-gray-600" />
            </div>
            <div>
              <h3 className="font-bold text-xl text-gray-800">
                Tisch {order.tableNumber || order.id?.slice(-4)}
              </h3>
              <div className="flex items-center space-x-2 text-sm text-gray-500">
                <Clock className="w-4 h-4" />
                <span>{formatWaitTime(order.createdAt)} Wartezeit</span>
              </div>
            </div>
          </div>

          <div className="flex items-center space-x-2">
            <AlertTriangle className={`w-5 h-5 ${styles.icon}`} />
            <span
              className={`px-3 py-1.5 rounded-full text-xs font-bold ${styles.badge} shadow-sm`}
            >
              {getPriorityText(priority)}
            </span>
          </div>
        </div>

        {/* Product Details */}
        <div className="bg-white rounded-lg p-4 mb-4 shadow-sm border border-gray-100">
          <div className="flex justify-between items-start mb-3">
            <h4 className="font-bold text-lg text-gray-800 leading-tight">
              {order.currentItem.name}
            </h4>
            <div className="bg-blue-100 text-blue-800 px-3 py-1 rounded-full text-sm font-semibold">
              {order.currentItem.quantity}x
            </div>
          </div>

          {/* Ingredients */}
          {order.currentItem.ingredients &&
            order.currentItem.ingredients.length > 0 && (
              <div className="mb-3">
                <p className="text-xs font-semibold text-gray-600 mb-2 uppercase tracking-wide">
                  Zutaten
                </p>
                <div className="flex flex-wrap gap-2">
                  {(Array.isArray(order.currentItem.ingredients)
                    ? order.currentItem.ingredients
                    : order.currentItem.ingredients.split(",")
                  ).map((ingredient: string, index: number) => (
                    <span
                      key={index}
                      className="bg-blue-50 text-blue-700 text-xs px-3 py-1.5 rounded-full border border-blue-200 font-medium"
                    >
                      {ingredient.trim()}
                    </span>
                  ))}
                </div>
              </div>
            )}

          {/* Special Instructions */}
          {order.currentItem.specialInstructions && (
            <div className="mb-3">
              <p className="text-xs font-semibold text-gray-600 mb-2 uppercase tracking-wide">
                Besondere Anweisungen
              </p>
              <div className="bg-amber-50 border border-amber-200 rounded-lg p-3">
                <p className="text-sm text-amber-800 font-medium">
                  {order.currentItem.specialInstructions}
                </p>
              </div>
            </div>
          )}
        </div>

        {/* Footer */}
        <div className="flex justify-between items-center">
          <div className="flex items-center space-x-2 text-sm text-gray-600">
            <User className="w-4 h-4" />
            <span className="font-medium">{order.customerName || "Gast"}</span>
          </div>

          <button
            onClick={() => handleCompleteItem(order.id)}
            className="bg-gradient-to-r from-green-500 to-green-600 hover:from-green-600 hover:to-green-700 text-white px-6 py-3 rounded-lg font-bold transition-all duration-200 transform hover:scale-105 shadow-lg hover:shadow-xl flex items-center space-x-2"
          >
            <CheckCircle className="w-5 h-5" />
            <span>Fertigstellen</span>
          </button>
        </div>
      </div>
    );
  };

  if (loading) {
    return (
      <div className="flex justify-center items-center h-64">
        <LoadingSpinner />
      </div>
    );
  }

  return (
    <div className="p-6 bg-gradient-to-br from-gray-50 to-gray-100 min-h-screen">
      <div className="max-w-7xl mx-auto">
        <div className="text-center mb-8">
          <h1 className="text-4xl font-bold text-gray-800 mb-2">
            Bar Operations
          </h1>
          <p className="text-gray-600 text-lg">
            Küchen-Display für Bestellungsmanagement
          </p>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
          {/* Drinks Section */}
          <div className="bg-white rounded-2xl shadow-xl p-6 border border-gray-200">
            <div className="flex items-center justify-between mb-6">
              <div className="flex items-center space-x-3">
                <div className="bg-blue-100 rounded-full p-3">
                  <span className="text-2xl">🍹</span>
                </div>
                <div>
                  <h2 className="text-2xl font-bold text-blue-600">Getränke</h2>
                  <p className="text-sm text-gray-500">Aktuelle Bestellungen</p>
                </div>
              </div>
              <div className="bg-blue-100 text-blue-800 px-4 py-2 rounded-full font-bold">
                {drinkOrders.length}{" "}
                {drinkOrders.length === 1 ? "Bestellung" : "Bestellungen"}
              </div>
            </div>

            <div className="max-h-[calc(100vh-250px)] overflow-y-auto scrollbar-thin scrollbar-thumb-gray-400 scrollbar-track-gray-100">
              {drinkOrders.length === 0 ? (
                <div className="text-center py-12">
                  <div className="bg-gray-100 rounded-full p-6 w-24 h-24 mx-auto mb-4 flex items-center justify-center">
                    <span className="text-3xl text-gray-400">🍹</span>
                  </div>
                  <p className="text-gray-500 text-lg font-medium">
                    Keine Getränkebestellungen
                  </p>
                  <p className="text-gray-400 text-sm">
                    Neue Bestellungen werden hier angezeigt
                  </p>
                </div>
              ) : (
                drinkOrders.map((order) => (
                  <OrderCard
                    key={`${order.id}-${order.currentItem.id}`}
                    order={order}
                  />
                ))
              )}
            </div>
          </div>

          {/* Shisha Section */}
          <div className="bg-white rounded-2xl shadow-xl p-6 border border-gray-200">
            <div className="flex items-center justify-between mb-6">
              <div className="flex items-center space-x-3">
                <div className="bg-purple-100 rounded-full p-3">
                  <span className="text-2xl">💨</span>
                </div>
                <div>
                  <h2 className="text-2xl font-bold text-purple-600">
                    Shisha Zubereitung
                  </h2>
                  <p className="text-sm text-gray-500">Aktuelle Bestellungen</p>
                </div>
              </div>
              <div className="bg-purple-100 text-purple-800 px-4 py-2 rounded-full font-bold">
                {shishaOrders.length}{" "}
                {shishaOrders.length === 1 ? "Bestellung" : "Bestellungen"}
              </div>
            </div>

            <div className="max-h-[calc(100vh-250px)] overflow-y-auto scrollbar-thin scrollbar-thumb-gray-400 scrollbar-track-gray-100">
              {shishaOrders.length === 0 ? (
                <div className="text-center py-12">
                  <div className="bg-gray-100 rounded-full p-6 w-24 h-24 mx-auto mb-4 flex items-center justify-center">
                    <span className="text-3xl text-gray-400">💨</span>
                  </div>
                  <p className="text-gray-500 text-lg font-medium">
                    Keine Shisha-Bestellungen
                  </p>
                  <p className="text-gray-400 text-sm">
                    Neue Bestellungen werden hier angezeigt
                  </p>
                </div>
              ) : (
                shishaOrders.map((order) => (
                  <OrderCard
                    key={`${order.id}-${order.currentItem.id}`}
                    order={order}
                  />
                ))
              )}
            </div>
          </div>
        </div>

        {/* Enhanced Summary Stats */}
        <div className="mt-8 grid grid-cols-1 md:grid-cols-4 gap-6">
          <div className="bg-white rounded-2xl shadow-lg p-6 border border-blue-100">
            <div className="flex items-center space-x-3">
              <div className="bg-blue-100 rounded-full p-3">
                <span className="text-xl">🍹</span>
              </div>
              <div>
                <h3 className="text-lg font-bold text-blue-600">Getränke</h3>
                <p className="text-3xl font-bold text-gray-800">
                  {drinkOrders.length}
                </p>
                <p className="text-sm text-gray-500">Aktive Bestellungen</p>
              </div>
            </div>
          </div>

          <div className="bg-white rounded-2xl shadow-lg p-6 border border-purple-100">
            <div className="flex items-center space-x-3">
              <div className="bg-purple-100 rounded-full p-3">
                <span className="text-xl">💨</span>
              </div>
              <div>
                <h3 className="text-lg font-bold text-purple-600">Shisha</h3>
                <p className="text-3xl font-bold text-gray-800">
                  {shishaOrders.length}
                </p>
                <p className="text-sm text-gray-500">Aktive Bestellungen</p>
              </div>
            </div>
          </div>

          <div className="bg-white rounded-2xl shadow-lg p-6 border border-red-100">
            <div className="flex items-center space-x-3">
              <div className="bg-red-100 rounded-full p-3">
                <AlertTriangle className="w-6 h-6 text-red-500" />
              </div>
              <div>
                <h3 className="text-lg font-bold text-red-600">Dringend</h3>
                <p className="text-3xl font-bold text-gray-800">
                  {
                    [...drinkOrders, ...shishaOrders].filter(
                      (order) => getOrderPriority(order.createdAt) === "high"
                    ).length
                  }
                </p>
                <p className="text-sm text-gray-500">Über 15 Min.</p>
              </div>
            </div>
          </div>

          <div className="bg-white rounded-2xl shadow-lg p-6 border border-green-100">
            <div className="flex items-center space-x-3">
              <div className="bg-green-100 rounded-full p-3">
                <CheckCircle className="w-6 h-6 text-green-500" />
              </div>
              <div>
                <h3 className="text-lg font-bold text-green-600">Gesamt</h3>
                <p className="text-3xl font-bold text-gray-800">
                  {drinkOrders.length + shishaOrders.length}
                </p>
                <p className="text-sm text-gray-500">Alle Bestellungen</p>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default BarOperations;
