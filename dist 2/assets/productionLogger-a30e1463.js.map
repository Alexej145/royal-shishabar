{"version":3,"file":"productionLogger-a30e1463.js","sources":["../../src/utils/productionLogger.ts"],"sourcesContent":["// Production-safe logging utility\nconst isDevelopment = process.env.NODE_ENV === 'development';\n\nexport const logger = {\n  debug: (message: string, ...args: any[]) => {\n    if (isDevelopment) {\n      console.log(`🔍 DEBUG: ${message}`, ...args);\n    }\n  },\n\n  info: (message: string, ...args: any[]) => {\n    if (isDevelopment) {\n      console.info(`ℹ️ INFO: ${message}`, ...args);\n    }\n  },\n\n  warn: (message: string, ...args: any[]) => {\n    if (isDevelopment) {\n      console.warn(`⚠️ WARN: ${message}`, ...args);\n    } else {\n      // In production, only log warnings to avoid noise\n      console.warn(`⚠️ ${message}`);\n    }\n  },\n\n  error: (message: string, error?: any, ...args: any[]) => {\n    // Always log errors, even in production\n    console.error(`❌ ERROR: ${message}`, error, ...args);\n    \n    // In production, you might want to send to error reporting service\n    if (!isDevelopment && error) {\n      // Example: sendToErrorReporting(message, error);\n    }\n  },\n\n  success: (message: string, ...args: any[]) => {\n    if (isDevelopment) {\n      console.log(`✅ SUCCESS: ${message}`, ...args);\n    }\n  },\n};\n\nexport default logger; "],"names":["logger","message","args","error"],"mappings":"AAGO,MAAMA,EAAS,CACpB,MAAO,CAACC,KAAoBC,IAAgB,CAI5C,EAEA,KAAM,CAACD,KAAoBC,IAAgB,CAI3C,EAEA,KAAM,CAACD,KAAoBC,IAAgB,CAK/B,QAAA,KAAK,MAAMD,CAAO,EAAE,CAEhC,EAEA,MAAO,CAACA,EAAiBE,KAAgBD,IAAgB,CAEvD,QAAQ,MAAM,YAAYD,CAAO,GAAIE,EAAO,GAAGD,CAAI,CAMrD,EAEA,QAAS,CAACD,KAAoBC,IAAgB,CAI9C,CACF"}