rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check if user is admin
    function isAdmin() {
      return request.auth != null && 
        (exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin') ||
        (request.auth.token.email in [
          'admin@royal-shishabar.com',
          'royal.waldkraiburg@gmail.com', 
          'jacob-s@live.de'
        ]);
    }
    
    // Helper function to check if user is staff or admin
    function isStaffOrAdmin() {
      return request.auth != null && 
        (exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['staff', 'admin']) ||
        (request.auth.token.email in [
          'admin@royal-shishabar.com',
          'royal.waldkraiburg@gmail.com', 
          'jacob-s@live.de'
        ]);
    }

    // Users collection - user profiles and roles
    match /users/{userId} {
      allow read: if request.auth != null && 
        (request.auth.uid == userId || isAdmin());
      allow write: if request.auth != null && 
        (request.auth.uid == userId || isAdmin());
      // Bootstrap: allow known admin emails to create their profiles
      allow create: if request.auth != null && 
        request.auth.uid == userId &&
        request.auth.token.email in [
          'admin@royal-shishabar.com',
          'royal.waldkraiburg@gmail.com', 
          'jacob-s@live.de'
        ];
    }

    // Orders collection - customer orders (SIMPLIFIED RULES)
    match /orders/{orderId} {
      // Anyone can create orders (walk-in customers, online orders)
      allow create: if true;
      // Staff and admins can read/write all orders
      allow read, write: if isStaffOrAdmin();
      // Customers can read their own orders by phone/email
      allow read: if request.auth != null && 
        (resource.data.customerPhone == request.auth.token.phone_number ||
         resource.data.customerEmail == request.auth.token.email);
    }

    // Reservations collection - table reservations
    match /reservations/{reservationId} {
      // Public read for availability checking
      allow read: if true;
      // Authenticated users can create reservations
      allow create: if request.auth != null;
      // Users can modify their own reservations
      allow update, delete: if request.auth != null && 
        resource.data.userId == request.auth.uid;
      // Staff/admins can read/write all reservations
      allow read, write: if isStaffOrAdmin();
    }

    // Loyalty system collections
    match /loyaltyCards/{cardId} {
      allow read: if request.auth != null;
      allow write: if isStaffOrAdmin();
    }
    
    match /loyaltyTransactions/{transactionId} {
      allow read: if request.auth != null;
      allow write: if isStaffOrAdmin();
    }

    // Menu collections - food and drinks
    match /menu/{itemId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    match /menuItems/{itemId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    // Events collection - special events
    match /events/{eventId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    // Table management
    match /tables/{tableId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    match /timeSlots/{slotId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    // Special offers and promotions
    match /special_offers/{offerId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    // Live popups and announcements
    match /popups/{popupId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    // Customer reviews
    match /reviews/{reviewId} {
      allow read: if true;
      allow create: if request.auth != null;
      allow update, delete: if request.auth != null && 
        (resource.data.userId == request.auth.uid || isAdmin());
    }

    // Music system
    match /playlists/{playlistId} {
      allow read: if true;
      allow write: if request.auth != null;
    }
    
    match /songRequests/{requestId} {
      allow read: if true;
      allow create: if request.auth != null;
      allow update, delete: if request.auth != null && 
        (resource.data.userId == request.auth.uid || isAdmin());
    }

    // Analytics - admin only
    match /analytics/{document} {
      allow read, write: if isAdmin();
    }

    // GDPR Collections
    match /cookie_consents/{consentId} {
      allow read, write: if request.auth != null && 
        resource.data.userId == request.auth.uid;
      allow create: if request.auth != null && 
        request.resource.data.userId == request.auth.uid;
      allow read: if isAdmin();
    }

    match /privacy_settings/{userId} {
      allow read, write: if request.auth != null && 
        request.auth.uid == userId;
      allow read: if isAdmin();
    }

    match /data_export_requests/{requestId} {
      allow create: if request.auth != null && 
        request.resource.data.userId == request.auth.uid;
      allow read: if request.auth != null && 
        resource.data.userId == request.auth.uid;
      allow read, write: if isAdmin();
    }

    match /data_deletion_requests/{requestId} {
      allow create: if request.auth != null && 
        request.resource.data.userId == request.auth.uid;
      allow read: if request.auth != null && 
        resource.data.userId == request.auth.uid;
      allow read, write: if isAdmin();
    }

    match /consent_records/{recordId} {
      allow create: if request.auth != null && 
        request.resource.data.userId == request.auth.uid;
      allow read: if request.auth != null && 
        resource.data.userId == request.auth.uid;
      allow read, write: if isAdmin();
    }

    match /gdpr_audit_log/{logId} {
      allow read: if request.auth != null && 
        resource.data.userId == request.auth.uid;
      allow read, write: if isAdmin();
    }

    // Catch-all for any other collections
    match /{document=**} {
      allow read, write: if isAdmin();
    }
  }
} 